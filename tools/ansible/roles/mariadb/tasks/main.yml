- name: Check if OS is Ubuntu LTS
  fail: msg="Server must be Ubuntu LTS"
  when: ansible_distribution != 'Ubuntu'
    or (ansible_distribution_version != '14.04'
      and ansible_distribution_version != '16.04'
      and ansible_distribution_version != '18.04'
      and ansible_distribution_version != '20.04')

- name: Check for existence of /root/.my.cnf
  stat: path=/root/.my.cnf
  register: root_my_cnf

- name: Fail when /root/.my.cnf doesn't exist, and no root password has been provided
  fail:
    msg: Could not read password from /root/.my.cnf. If this is the first time running your playbook, append `  --extra-vars mysql_root_password=$(openssl rand -base64 24) `  to your command line. Setting the mysql root password only needs to be done once.
  when: root_my_cnf is defined
    and root_my_cnf.stat is defined
    and root_my_cnf.stat.exists == False
    and mysql_root_password is not defined

- name: Install software-properties-common
  apt:
    name: software-properties-common
    update_cache: true
    state: present

- name: Apply apt config for explicitly specified MariaDB versions
  block:
  - name: Add apt key for MariaDB
    apt_key:
      keyserver: keyserver.ubuntu.com
      id: F1656F24C74CD1D8
  - name: Add apt repo for MariaDB
    apt_repository:
      repo: deb [arch={{ mariadb_repo_deb_arch }}] {{ mariadb_mirror_proto }}://{{ mariadb_mirror }}/mariadb/repo/{{ mariadb_version }}/ubuntu {{ ansible_distribution_release }} main
      state: present
      filename: mariadb
      update_cache: true
    tags:
      - apt-repo
  when: mariadb_version != 'auto'

- name: Install MariaDB Server
  apt:
    name: mariadb-server
    state: present
    update_cache: yes
  when: client_only == false

- name: Install MariaDB client
  apt:
    name: mariadb-client
    state: present
    update_cache: yes
  when: client_only == true

- name: Install python module
  apt:
    name:
      - python3-mysqldb
    state: present

- block:
    - name: Ensure mysql is running and starts on boot
      service:
        name: mysql
        state: started
        enabled: true

    - name: Get list of hosts for the anonymous user.
      command: mysql -NBe 'SELECT Host FROM mysql.user WHERE User = ""'
      register: mysql_anonymous_hosts
      changed_when: false
      check_mode: no

    - name: Remove anonymous MySQL users.
      mysql_user:
         name: ""
         host: "{{ item }}"
         state: absent
      with_items: "{{ mysql_anonymous_hosts.stdout_lines|default([]) }}"

    - name: Remove the test database
      mysql_db:
        name: test
        state: absent

    - name: Override default bind address
      copy:
        dest: "{{ mysql_include_dir }}/99-acromedia-bind-address.cnf"
        content: |
          [mysqld]
          bind-address = {{ mysql_bind_address }}
        force: true
        owner: root
        group: root
        mode: 0644
        backup: false
      when: mysql_bind_address != '127.0.0.1'
      notify:
        - armdb restart mysql

    - debug:
        var: mysql_allow_from

    - name: Give mysql root permission to run commands from places other than localhost (mysql_allow_from = scalar)
      mysql_user:
        name: "{{ mysql_user }}"
        priv: "*.*:ALL,GRANT"
        append_privs: true
        state: present
        password: '{{ mysql_root_password }}'
        host: '{{ mysql_allow_from }}'
      when: mysql_root_password is defined
        and mysql_root_password|trim != ''
        and mysql_allow_from is string
        and mysql_allow_from != 'localhost'

    - name: Give mysql root permission to run commands from places other than localhost  (mysql_allow_from = list)
      mysql_user:
        name: "{{ mysql_user }}"
        priv: "*.*:ALL,GRANT"
        append_privs: true
        state: present
        password: '{{ mysql_root_password }}'
        host: '{{ item }}'
      when: mysql_root_password is defined
        and mysql_root_password|trim != ''
        and mysql_allow_from is iterable
        and (not mysql_allow_from is string)
        and mysql_allow_from |length > 0
      with_items: "{{ mysql_allow_from }}"


    - name: Update mysql root password
      mysql_user:
        name: "{{ mysql_user }}"
        host: "{{ item }}"
        password: "{{ mysql_root_password }}"
      with_items:
        - "{{ ansible_fqdn }}"
        - 127.0.0.1
        - ::1
        - localhost
      when: (root_my_cnf is defined
        and root_my_cnf.stat is defined
        and root_my_cnf.stat.exists == False)
        or mysql_root_password is defined
      register: mysql_password_changed

  when: client_only == false


- name: Save mysql root password credentials to /root/.my.cnf
  template: src=root/my.cnf.j2 dest=/root/.my.cnf owner=root mode=0600 backup=yes
  when: (
      mysql_password_changed is defined
      and mysql_password_changed is changed
    )
    or (
      client_only == true
      and mysql_root_password is defined
    )

- name: Apply Acro's MariaDB 10.0 server config to Ubuntu 16.04
  template:
    src: etc/mysql/conf.d/acro.cnf.j2
    dest: /etc/mysql/conf.d/acro.cnf
    owner: root
    mode: 0644
    backup: yes
  notify:
    - armdb restart mysql
  when: ansible_distribution_version == '16.04'
    and client_only == false

- name: Apply MariaDB server customizations on Ubuntu >= 18.04
  template:
    src: etc/mysql/mariadb.conf.d/99-acromedia-server-overrides.cnf.j2
    dest: "{{ mysql_include_dir }}/99-acromedia-server-overrides.cnf"
    owner: root
    group: root
    mode: 0644
    backup: yes
  notify:
    - armdb restart mysql
  when: ansible_distribution == 'Ubuntu' and
    ansible_distribution_major_version|int >= 18
    and client_only == false

- name: Apply MariaDB cient customizations on Ubuntu >= 18.04
  template:
    src: etc/mysql/mariadb.conf.d/99-acromedia-client-overrides.cnf.j2
    dest: "{{ mysql_include_dir }}/99-acromedia-client-overrides.cnf"
    owner: root
    mode: 0644
    backup: yes
  when: ansible_distribution == 'Ubuntu' and
    ansible_distribution_major_version|int >= 18
